base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=c, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
View(data)
library(readr)
library(dplyr)
library(tidyr)
library(igraph)
library(graphlayouts)
library(ggraph)
library(ggplot2)
extraction <- read_csv("Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution/data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
build_result <- function(data, column_name, group_name) {
tmp <- separate_rows(data, {{ column_name }}, sep = ",")
tmp <- tmp %>%
group_by({{ column_name }}) %>%
summarize(value=n()) %>%
rename(c = {{ column_name }})
tmp$group=group_name
tmp
}
###############
data <- build_result(extraction, Model...10, "Model Support")
tmp <- build_result(extraction, Strategy, "Resource Allocation Capability")
data <- rbind(data, tmp)
tmp <- build_result(extraction, `Process Evolution`, "Process Flexibility Capability")
data <- rbind(data, tmp)
data <- data %>%
drop_na
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=c, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
library(readr)
library(dplyr)
library(tidyr)
library(igraph)
library(graphlayouts)
library(ggraph)
library(ggplot2)
extraction <- read_csv("Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution/data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
build_result <- function(data, column_name, group_name) {
tmp <- separate_rows(data, {{ column_name }}, sep = ",")
tmp <- tmp %>%
group_by({{ column_name }}) %>%
summarize(value=n()) %>%
rename(c = {{ column_name }})
tmp$group=group_name
tmp
}
###############
data <- build_result(extraction, Model...10, "Model Support")
tmp <- build_result(extraction, Strategy, "Resource Allocation Capability")
data <- rbind(data, tmp)
tmp <- build_result(extraction, `Process Evolution`, "Process Flexibility Capability")
data <- rbind(data, tmp)
data <- data %>%
drop_na
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=c, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
library(readr)
library(dplyr)
library(tidyr)
library(igraph)
library(graphlayouts)
library(ggraph)
library(ggplot2)
extraction <- read_csv("Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution/data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
build_result <- function(data, column_name, group_name) {
tmp <- separate_rows(data, {{ column_name }}, sep = ",")
tmp <- tmp %>%
group_by({{ column_name }}) %>%
summarize(value=n()) %>%
rename(c = {{ column_name }})
tmp$group=group_name
tmp
}
###############
data <- build_result(extraction, Model...10, "Model Support")
tmp <- build_result(extraction, Strategy, "Resource Allocation Capability")
data <- rbind(data, tmp)
tmp <- build_result(extraction, `Process Evolution`, "Process Flexibility Capability")
data <- rbind(data, tmp)
data <- data %>%
drop_na
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=c, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
View(data)
setwd("~/Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution")
library(readr)
library(dplyr)
library(tidyr)
library(igraph)
library(graphlayouts)
library(ggraph)
library(ggplot2)
extraction <- read_csv("Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution/data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
gasprice <- read_csv("Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution/data/gasprice.csv",
col_types = cols(`Date(UTC)` = col_date(format = "%m/%d/%Y")))
eth_usd <- read_csv("Projects/Puffin/SLR Analysis/SLR_Blockchain_BP_Execution/data/eth-usd.csv",
col_types = cols(Date = col_date(format = "%Y-%m-%d")))
colors = c("#724073", "#1E2759", "#124019", "#F2DC6D", "#000000")
cost_column_name <- "Avg. Cost / Instance Ex"
wei_to_eth <- function(wei) {
wei / 10^18
}
stopifnot(all.equal(wei_to_eth(1000000000000000000), 1))
# Cost
#######################################################
extraction_cost <- extraction %>%
filter(Cost == TRUE) %>%
filter(Unit == 'Gas') %>%
select(Year, Title, cost_column_name, "One Time Cost", "Case", "Unit") %>%
drop_na(cost_column_name)
# Convert Wei to ETH
gasprice$`Value (Eth)` <- gasprice$`Value (Wei)` %>%
wei_to_eth
# We're only interested in the yearly prices
gasprice$`Year` <- strftime(gasprice$`Date(UTC)`, "%Y")
gasprice <- aggregate(`Value (Eth)` ~ Year,
gasprice,
FUN = mean)
eth_usd$Year <- strftime(eth_usd$Date, "%Y")
eth_usd <- aggregate(`Open` ~ Year,
eth_usd,
FUN = mean)
extraction_cost$Date <- extraction_cost$Year
extraction_cost$Year <- strftime(extraction_cost$Date, "%Y")
# Calculate Ex price in ETH
extraction_cost <- merge(extraction_cost, gasprice, by.x = "Year", by.y = "Year")
extraction_cost$`Ex Cost (Eth)` <- extraction_cost$`Avg. Cost / Instance Ex` * extraction_cost$`Value (Eth)`
# Calculate Ex price in $
extraction_cost <- merge(extraction_cost, eth_usd, by.x = "Year", by.y = "Year")
extraction_cost$`Ex Cost ($)` <- extraction_cost$`Ex Cost (Eth)` * extraction_cost$Open
# Calculate Ex price in $ today
eth_usd_today <- eth_usd %>%
filter(Year == "2022")
gasprice_today <- gasprice %>%
filter(Year == "2022")
extraction_cost$`Ex Cost Today ($)` <- extraction_cost$`Avg. Cost / Instance Ex` * gasprice_today$`Value (Eth)` * eth_usd_today$Open
# Plotting
ggplot(extraction_cost, aes(x=Date, y=`Ex Cost ($)`)) +
geom_linerange(aes(ymin = `Ex Cost ($)`, ymax = `Ex Cost Today ($)`),
position = position_dodge2(width=250)) +
geom_point( aes(x=Date, y=`Ex Cost ($)`, color="Cost at Publication", shape="Cost at Publication"),
size=3,
position = position_dodge2(width=250)) +
geom_point( aes(x=Date, y=`Ex Cost Today ($)`, color="Cost Today", shape="Cost Today"),
size=2,
shape=17,
position = position_dodge2(width=250)) +
scale_y_continuous(trans = "log10") +
scale_x_date(date_labels = "%Y", breaks = "1 year", minor_breaks = NULL) +
scale_color_manual(name = element_blank(),
values = c("Cost at Publication" = colors[1], "Cost Today" = "red")) +
scale_shape_manual(name = element_blank(), values = c("Cost at Publication" = 16, "Cost Today"= 17)) +
theme(legend.position = "bottom") +
xlab(label = 'Publication Year') +
ylab(label = 'Execution Cost ($)')
library(readr)
library(dplyr)
library(tidyr)
library(igraph)
library(graphlayouts)
library(ggraph)
library(ggplot2)
extraction <- read_csv("/data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
gasprice <- read_csv("/data/gasprice.csv",
col_types = cols(`Date(UTC)` = col_date(format = "%m/%d/%Y")))
eth_usd <- read_csv("/data/eth-usd.csv",
col_types = cols(Date = col_date(format = "%Y-%m-%d")))
colors = c("#724073", "#1E2759", "#124019", "#F2DC6D", "#000000")
cost_column_name <- "Avg. Cost / Instance Ex"
wei_to_eth <- function(wei) {
wei / 10^18
}
stopifnot(all.equal(wei_to_eth(1000000000000000000), 1))
# Cost
#######################################################
extraction_cost <- extraction %>%
filter(Cost == TRUE) %>%
filter(Unit == 'Gas') %>%
select(Year, Title, cost_column_name, "One Time Cost", "Case", "Unit") %>%
drop_na(cost_column_name)
# Convert Wei to ETH
gasprice$`Value (Eth)` <- gasprice$`Value (Wei)` %>%
wei_to_eth
# We're only interested in the yearly prices
gasprice$`Year` <- strftime(gasprice$`Date(UTC)`, "%Y")
gasprice <- aggregate(`Value (Eth)` ~ Year,
gasprice,
FUN = mean)
eth_usd$Year <- strftime(eth_usd$Date, "%Y")
eth_usd <- aggregate(`Open` ~ Year,
eth_usd,
FUN = mean)
extraction_cost$Date <- extraction_cost$Year
extraction_cost$Year <- strftime(extraction_cost$Date, "%Y")
# Calculate Ex price in ETH
extraction_cost <- merge(extraction_cost, gasprice, by.x = "Year", by.y = "Year")
extraction_cost$`Ex Cost (Eth)` <- extraction_cost$`Avg. Cost / Instance Ex` * extraction_cost$`Value (Eth)`
# Calculate Ex price in $
extraction_cost <- merge(extraction_cost, eth_usd, by.x = "Year", by.y = "Year")
extraction_cost$`Ex Cost ($)` <- extraction_cost$`Ex Cost (Eth)` * extraction_cost$Open
# Calculate Ex price in $ today
eth_usd_today <- eth_usd %>%
filter(Year == "2022")
gasprice_today <- gasprice %>%
filter(Year == "2022")
extraction_cost$`Ex Cost Today ($)` <- extraction_cost$`Avg. Cost / Instance Ex` * gasprice_today$`Value (Eth)` * eth_usd_today$Open
# Plotting
ggplot(extraction_cost, aes(x=Date, y=`Ex Cost ($)`)) +
geom_linerange(aes(ymin = `Ex Cost ($)`, ymax = `Ex Cost Today ($)`),
position = position_dodge2(width=250)) +
geom_point( aes(x=Date, y=`Ex Cost ($)`, color="Cost at Publication", shape="Cost at Publication"),
size=3,
position = position_dodge2(width=250)) +
geom_point( aes(x=Date, y=`Ex Cost Today ($)`, color="Cost Today", shape="Cost Today"),
size=2,
shape=17,
position = position_dodge2(width=250)) +
scale_y_continuous(trans = "log10") +
scale_x_date(date_labels = "%Y", breaks = "1 year", minor_breaks = NULL) +
scale_color_manual(name = element_blank(),
values = c("Cost at Publication" = colors[1], "Cost Today" = "red")) +
scale_shape_manual(name = element_blank(), values = c("Cost at Publication" = 16, "Cost Today"= 17)) +
theme(legend.position = "bottom") +
xlab(label = 'Publication Year') +
ylab(label = 'Execution Cost ($)')
extraction <- read_csv("/data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
extraction <- read_csv("data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
library(readr)
library(dplyr)
library(tidyr)
library(igraph)
library(graphlayouts)
library(ggraph)
library(ggplot2)
extraction <- read_csv("data/extraction_cost.csv",
col_types = cols(`Avg. Cost / Instance Ex` = col_number(),
`One Time Cost` = col_number(),
`Year` = col_date(format = "%Y")),
skip = 1) %>%
filter(Included == TRUE)
gasprice <- read_csv("data/gasprice.csv",
col_types = cols(`Date(UTC)` = col_date(format = "%m/%d/%Y")))
eth_usd <- read_csv("data/eth-usd.csv",
col_types = cols(Date = col_date(format = "%Y-%m-%d")))
colors = c("#724073", "#1E2759", "#124019", "#F2DC6D", "#000000")
cost_column_name <- "Avg. Cost / Instance Ex"
wei_to_eth <- function(wei) {
wei / 10^18
}
stopifnot(all.equal(wei_to_eth(1000000000000000000), 1))
# Cost
#######################################################
extraction_cost <- extraction %>%
filter(Cost == TRUE) %>%
filter(Unit == 'Gas') %>%
select(Year, Title, cost_column_name, "One Time Cost", "Case", "Unit") %>%
drop_na(cost_column_name)
# Convert Wei to ETH
gasprice$`Value (Eth)` <- gasprice$`Value (Wei)` %>%
wei_to_eth
# We're only interested in the yearly prices
gasprice$`Year` <- strftime(gasprice$`Date(UTC)`, "%Y")
gasprice <- aggregate(`Value (Eth)` ~ Year,
gasprice,
FUN = mean)
eth_usd$Year <- strftime(eth_usd$Date, "%Y")
eth_usd <- aggregate(`Open` ~ Year,
eth_usd,
FUN = mean)
extraction_cost$Date <- extraction_cost$Year
extraction_cost$Year <- strftime(extraction_cost$Date, "%Y")
# Calculate Ex price in ETH
extraction_cost <- merge(extraction_cost, gasprice, by.x = "Year", by.y = "Year")
extraction_cost$`Ex Cost (Eth)` <- extraction_cost$`Avg. Cost / Instance Ex` * extraction_cost$`Value (Eth)`
# Calculate Ex price in $
extraction_cost <- merge(extraction_cost, eth_usd, by.x = "Year", by.y = "Year")
extraction_cost$`Ex Cost ($)` <- extraction_cost$`Ex Cost (Eth)` * extraction_cost$Open
# Calculate Ex price in $ today
eth_usd_today <- eth_usd %>%
filter(Year == "2022")
gasprice_today <- gasprice %>%
filter(Year == "2022")
extraction_cost$`Ex Cost Today ($)` <- extraction_cost$`Avg. Cost / Instance Ex` * gasprice_today$`Value (Eth)` * eth_usd_today$Open
# Plotting
ggplot(extraction_cost, aes(x=Date, y=`Ex Cost ($)`)) +
geom_linerange(aes(ymin = `Ex Cost ($)`, ymax = `Ex Cost Today ($)`),
position = position_dodge2(width=250)) +
geom_point( aes(x=Date, y=`Ex Cost ($)`, color="Cost at Publication", shape="Cost at Publication"),
size=3,
position = position_dodge2(width=250)) +
geom_point( aes(x=Date, y=`Ex Cost Today ($)`, color="Cost Today", shape="Cost Today"),
size=2,
shape=17,
position = position_dodge2(width=250)) +
scale_y_continuous(trans = "log10") +
scale_x_date(date_labels = "%Y", breaks = "1 year", minor_breaks = NULL) +
scale_color_manual(name = element_blank(),
values = c("Cost at Publication" = colors[1], "Cost Today" = "red")) +
scale_shape_manual(name = element_blank(), values = c("Cost at Publication" = 16, "Cost Today"= 17)) +
theme(legend.position = "bottom") +
xlab(label = 'Publication Year') +
ylab(label = 'Execution Cost ($)')
